import pandas
from matplotlib.pyplot import *

try1 = pandas.read_csv("4cores_localvm.csv", sep=",", header=0, index_col=False)
try2 = pandas.read_csv("4cores_localvm_try2.csv", sep=",", header=0, index_col=False)
try3 = pandas.read_csv("4cores_localvm_try3.csv", sep=",", header=0, index_col=False)

#Un example de variable d'état du drone (vitesse horizontale)
fig, (ax1, ax2) = subplots(2,1)
ax1.grid()
ax1.plot(try1["pas de simulation (ms)"]/1000, try1["vitesse horizontale"])
ax1.set_title('Vitesse horizontale du drone par rapport au temps de simulation')
ax1.set_ylabel('Vitesse (m/s)')
ax2.margins(x=-0.496, y=0.05)
ax2.set_ylim([0,2])
ax2.plot(try1["pas de simulation (ms)"]/1000, try1["vitesse horizontale"], ".",)
ax2.set_ylabel('Vitesse (m/s)')
ax2.set_xlabel('Temps depuis le début de la simulation (s)')
ax2.grid()
savefig("csv_variable_etat.png")
#Une figure par run pour les métriques d'ordonnancement (5 tâches)
fig, (ax1, ax2) = subplots(2,1)
ax1.set_ylabel("temps d'exécution (ms)")
ax1.set_title("Performance d'ordonnancement essai 1 et 2")
ax1.plot(try2["pas de simulation (ms)"]/1000, try2["orientation_cont last runtime"], color="#ff0000", label="orientation")
ax1.plot(try2["pas de simulation (ms)"]/1000, try2["orientation_cont worst runtime"], color="#850000", label="orientation (worst)")
ax1.plot(try2["pas de simulation (ms)"]/1000, try2["vitesse_cont last runtime"], color="#00ff00", label="vitesse")
ax1.plot(try2["pas de simulation (ms)"]/1000, try2["vitesse_cont worst runtime"], color="#008500", label="vitesse (worst)")
ax1.plot(try2["pas de simulation (ms)"]/1000, try2["batterie_cont last runtime"], color="#0000ff", label="batterie")
ax1.plot(try2["pas de simulation (ms)"]/1000, try2["batterie_cont worst runtime"], color="#000085", label="batterie (worst)")
ax1.grid()
ax2.set_ylabel("temps d'exécution (ms)")
ax2.set_xlabel('Temps depuis le début de la simulation (s)')
ax2.plot(try1["pas de simulation (ms)"]/1000, try1["orientation_cont last runtime"], color="#ff0000", label=None)
ax2.plot(try1["pas de simulation (ms)"]/1000, try1["orientation_cont worst runtime"], color="#850000", label=None)
ax2.plot(try1["pas de simulation (ms)"]/1000, try1["vitesse_cont last runtime"], color="#00ff00", label=None)
ax2.plot(try1["pas de simulation (ms)"]/1000, try1["vitesse_cont worst runtime"], color="#008500", label=None)
ax2.plot(try1["pas de simulation (ms)"]/1000, try1["batterie_cont last runtime"], color="#0000ff", label=None)
ax2.plot(try1["pas de simulation (ms)"]/1000, try1["batterie_cont worst runtime"], color="#000085", label=None)
ax2.grid()
ax1.legend(loc="best")
savefig("csv_try_1_2.png")

#Une tâche (orientation_cont), métriques sur les 3 runs
fig = figure()
ax=axes()
ax.set_ylabel("temps d'exécution (ms)")
ax.set_xlabel('Temps depuis le début de la simulation (s)')
ax.set_title("Temps d'exécution d'orientation_cont")
plot(try1["pas de simulation (ms)"]/1000, try1["orientation_cont last runtime"], color="#ff0000", label="essai 1")
plot(try1["pas de simulation (ms)"]/1000, try1["orientation_cont worst runtime"], color="#850000", label="essai 1 (worst)")
plot(try2["pas de simulation (ms)"]/1000, try2["orientation_cont last runtime"], color="#00ff00", label="essai 2")
plot(try2["pas de simulation (ms)"]/1000, try2["orientation_cont worst runtime"], color="#008500", label="essai 2 (worst)")
plot(try3["pas de simulation (ms)"]/1000, try3["orientation_cont last runtime"], color="#0000ff", label="essai 3")
plot(try3["pas de simulation (ms)"]/1000, try3["orientation_cont worst runtime"], color="#000085", label="essai 3 (worst)")
ax.legend(loc="best")
grid()
savefig("orientation_cont.png")
